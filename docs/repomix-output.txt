This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-04T03:12:39.616Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
_includes/
  footer.html
  header.html
  search.html
_layouts/
  default.html
  home.html
  homily.html
  page.html
  post.html
assets/
  css/
    style.css
  js/
    search.js
_config.yml
.gitignore
404.html
about.markdown
create_project.sh
Gemfile
index.markdown
process_markdown.py
README.md

================================================================
Files
================================================================

================
File: _includes/footer.html
================
<footer>
    <p>Â© 2025 FCD </p>
</footer>

================
File: _includes/header.html
================
<header>
    <nav>
        <a href="{{ '/' | relative_url }}">Home</a>
        <div class="logo">
            <a href="{{ '/' | relative_url }}"><img src="{{ site.baseurl }}/assets/images/logo-circ.png" alt="Fr. Conor Meditations Logo"></a>
        </div>

    </nav>
</header>

================
File: _includes/search.html
================
<input type="text" id="search-box" placeholder="Search meditations...">
<div id="search-results"></div>

================
File: _layouts/default.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ page.title }} | {{ site.title }}</title>
    <link rel="stylesheet" href="{{ site.baseurl }}/assets/css/style.css">
</head>
<body data-baseurl="{{ site.baseurl }}">
    {% include header.html %}

    <main>
        {{ content }}
    </main>

    {% include footer.html %}
    <script src="{{ site.baseurl }}/assets/js/search.js?v={{ site.time | date: '%s' }}"></script>
</body>
</html>

================
File: _layouts/home.html
================
---
layout: default
---

{{ content }}

<h2>Contents</h2>
<ul>
  {% for post in site.posts %}
    <li>
      <a href="{{ post.url | relative_url }}">{{ post.title }}</a>
    </li>
  {% endfor %}
</ul>

================
File: _layouts/homily.html
================
---
layout: default
---

<article>
    <h1>{{ page.title }}</h1>
    {{ content }}
</article>

================
File: _layouts/page.html
================
---
layout: default
---

<article>
    <h1>{{ page.title }}</h1>

    {{ content }}
</article>

================
File: _layouts/post.html
================
---
layout: default
---

<article>
    <h1>{{ page.title }}</h1>
    <p class="meta">{{ page.date | date_to_string }}</p>

    {{ content }}
</article>

================
File: assets/css/style.css
================
body {
  font-family: Arial, sans-serif;
  line-height: 1.6;
  margin: 0;
  padding: 0;
  background: #f4f4f4;
  color: #333;
}

header {
  background: #09403A;
  color: #fff;
  padding: 5px 0; /* Reduced padding, adjust as needed */
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%; /* Ensure header spans full width */
}

nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%; /* Nav takes full width of header */
  padding: 0 20px; /* Add some padding on the sides */
  box-sizing: border-box; /* Include padding in width calculation */
}

.logo {
  margin-left: 0px; /* Reset margin */
}

.logo img {
  height: 50px; /* Adjust height as needed */
  width: auto;
  vertical-align: middle;
}


nav a {
  color: #fff;
  text-decoration: none;
  margin-right: 0px; /* Reset margin */
  font-size: 1.2rem; /*  increase font size */
  font-weight: normal; /* Remove bold, set to normal weight */
}


main {
  padding: 20px;
}

article {
  background: #fff;
  padding: 20px;
  margin-bottom: 10px;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

h1, h2 {
  color: #333;
}

a {
  color: #4682B4;
}

footer {
  text-align: center;
  padding: 0.5px;
  background: #333;
  color: #fff;
  position: fixed;
  bottom: 0;
  width: 100%;
  line-height: 0.1;
}

#search-box {
  padding: 8px;
  margin: 10px 0;
  border: 1px solid #ddd;
  border-radius: 4px;
  width: 300px;
}

#search-results {
  margin-top: 10px;
}

================
File: assets/js/search.js
================
document.addEventListener('DOMContentLoaded', function() {
  var searchBox = document.getElementById('search-box');
  var searchResults = document.getElementById('search-results');
  var meditations = [];

  // Get baseurl from data attribute, with fallback to empty string
  var baseurl = document.body.dataset.baseurl || '';

  // Remove trailing slash from baseurl if present
  if (baseurl.endsWith('/')) {
    baseurl = baseurl.slice(0, -1);
  }

  // Construct the fetch URL
  var fetchUrl = baseurl + '/data/meditations.json';
  console.log("Fetching data from:", fetchUrl);

  fetch(fetchUrl)
    .then(response => {
      console.log("Response status:", response.status);
      if (!response.ok) {
        // Log the response text for debugging
        return response.text().then(text => {
          console.error("Response text:", text);
          throw new Error('Network response was not ok, status: ' + response.status);
        });
      }
      return response.json();
    })
    .then(data => {
      console.log("Fetched data:", data);
      meditations = data;
    })
    .catch(error => {
      console.error('Error fetching meditations data:', error);
      searchResults.innerHTML = '<p>Error loading meditations data. See console for details.</p>';
    });

  searchBox.addEventListener('input', function() {
    var searchTerm = searchBox.value.toLowerCase();

    // Clear results if search box is empty
    if (searchTerm === '') {
      searchResults.innerHTML = '';
      return; // Exit early
    }

    // Filter meditations based on search term
    var filteredMeditations = meditations.filter(function(meditation) {
      return meditation.title.toLowerCase().includes(searchTerm) ||
             meditation.content.toLowerCase().includes(searchTerm);
    });

    displayResults(filteredMeditations);
  });

  function displayResults(results) {
    searchResults.innerHTML = ''; // Clear previous results

    if (results.length === 0) {
      var noResultsItem = document.createElement('p');
      noResultsItem.textContent = 'No results found.';
      searchResults.appendChild(noResultsItem);
    } else {
      var resultsList = document.createElement('ul');
      results.forEach(function(meditation) {
        var listItem = document.createElement('li');
        var link = document.createElement('a');
        // Use the baseurl for links
        link.href = baseurl + '/homilies/' + meditation.slug + '/';
        link.textContent = meditation.title;
        listItem.appendChild(link);
        resultsList.appendChild(listItem);
      });
      searchResults.appendChild(resultsList);
    }
  }
});

================
File: _config.yml
================
title: Fr. Conor Donnelly Meditations
description: A collection of meditations by Fr. Conor Donnelly
baseurl: "/meditations"  # The subpath of your site (important for GitHub Pages)
url: "https://frconor-ebook.github.io" # Your site's URL
permalink: /homilies/:title/
markdown: kramdown

# Build settings
source: .
destination: ./docs
plugins:
  - jekyll-feed

# Include an exclude
include:
  - "data/"

exclude:
  - "Gemfile"
  - "Gemfile.lock"
  - "vendor"
  - "create_project.sh"
  - "transcript_proofread_markdown_small/"
  - "transcript_proofread_markdown/"
  - "_posts/2025-02-03-welcome-to-jekyll.markdown"
  - "about.markdown"
  - "README.md"
  - "process_markdown.py"
  - ".gitignore"
  - "docs/README.md"

# ADD THIS SECTION
defaults:
  - scope:
      path: ""
      type: "pages"
    values:
      layout: "page"
  - scope:
      path: "data" # Apply these settings to files in _data
    values:
      sitemap: false  # Exclude data files from sitemap (optional but recommended)

================
File: .gitignore
================
_site
.sass-cache
.jekyll-cache
.jekyll-metadata
vendor

================
File: 404.html
================
---
permalink: /404.html
layout: page
---

<style type="text/css" media="screen">
  .container {
    margin: 10px auto;
    max-width: 600px;
    text-align: center;
  }
  h1 {
    margin: 30px 0;
    font-size: 4em;
    line-height: 1;
    letter-spacing: -1px;
  }
</style>

<div class="container">
  <h1>404</h1>

  <p><strong>Page not found :(</strong></p>
  <p>The requested page could not be found.</p>
</div>

================
File: about.markdown
================
---
layout: page
title: About
permalink: /about/
---

This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at [jekyllrb.com](https://jekyllrb.com/)

You can find the source code for Minima at GitHub:
[jekyll][jekyll-organization] /
[minima](https://github.com/jekyll/minima)

You can find the source code for Jekyll at GitHub:
[jekyll][jekyll-organization] /
[jekyll](https://github.com/jekyll/jekyll)


[jekyll-organization]: https://github.com/jekyll

================
File: create_project.sh
================
#!/bin/bash

# Create directories
mkdir -p _posts docs/assets/css docs/assets/js docs/homilies _data _includes _layouts transcript_proofread_markdown_small

# Create placeholder files (you'll fill these in later)
touch docs/assets/css/style.css
touch docs/assets/js/search.js
touch _data/meditations.json
touch _includes/header.html
touch _includes/footer.html
touch _includes/search.html
touch _layouts/default.html
touch _layouts/homily.html
touch index.md

# Create example markdown files (replace with your actual files later)
touch transcript_proofread_markdown_small/A-Christian-Outlook-on-Death.OLVpr.md
touch transcript_proofread_markdown_small/Abandonment-2022.OLVpr.md

echo "Project structure created!"

================
File: Gemfile
================
source "https://rubygems.org"
# Hello! This is where you manage which Jekyll version is used to run.
# When you want to use a different version, change it below, save the
# file and run `bundle install`. Run Jekyll with `bundle exec`, like so:
#
#     bundle exec jekyll serve
#
# This will help ensure the proper Jekyll version is running.
# Happy Jekylling!
gem "jekyll", "~> 4.4.1"
# This is the default theme for new Jekyll sites. You may change this to anything you like.
gem "minima", "~> 2.5"
# If you want to use GitHub Pages, remove the "gem "jekyll"" above and
# uncomment the line below. To upgrade, run `bundle update github-pages`.
# gem "github-pages", group: :jekyll_plugins
# If you have any plugins, put them here!
group :jekyll_plugins do
  gem "jekyll-feed", "~> 0.12"
end

# Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem
# and associated library.
platforms :mingw, :x64_mingw, :mswin, :jruby do
  gem "tzinfo", ">= 1", "< 3"
  gem "tzinfo-data"
end

# Performance-booster for watching directories on Windows
gem "wdm", "~> 0.1", :platforms => [:mingw, :x64_mingw, :mswin]

# Lock `http_parser.rb` gem to `v0.6.x` on JRuby builds since newer versions of the gem
# do not have a Java counterpart.
gem "http_parser.rb", "~> 0.6.0", :platforms => [:jruby]

================
File: index.markdown
================
---
layout: home
---

<h1>Fr. Conor Donnelly's Meditations</h1>

{% include search.html %}

================
File: process_markdown.py
================
import json
import os
import re
from datetime import datetime


def convert_markdown_to_posts(source_dir, posts_dir, data_dir):
    """
    Converts markdown files to Jekyll posts and creates a meditations.json index.

    Args:
        source_dir: Directory containing the source markdown files.
        posts_dir: Directory where Jekyll post files will be created.
        data_dir: Directory where meditations.json will be created.
    """

    meditations = []
    for filename in os.listdir(source_dir):
        if filename.endswith(".md"):
            filepath = os.path.join(source_dir, filename)
            print(f"Processing: {filename}")

            with open(filepath, "r") as f:
                lines = f.readlines()

            # Find the first line that starts with "#" (title line)
            title_line_index = -1
            for i, line in enumerate(lines):
                # Strip any trailing \r or \n and check for "#" at the start
                if line.rstrip("\r\n").lstrip().startswith("#"):
                    title_line_index = i
                    break

            # Skip files without a title line
            if title_line_index == -1:
                print(f"Skipping {filename} (no title found).")
                continue

            # Extract title from the title line
            # Strip any trailing \r or \n and remove "#" and spaces
            title = lines[title_line_index].rstrip("\r\n").lstrip("# ").strip()

            # Create a slug for the URL
            slug = re.sub(r"[^\w\s-]", "", title).lower().replace(" ", "-")

            # Generate post filename with current date
            post_filename = f"{datetime.now().strftime('%Y-%m-%d')}-{slug}.md"
            post_filepath = os.path.join(posts_dir, post_filename)

            # Create YAML front matter
            front_matter = f"""---
layout: homily
title: "{title}"
---
"""

            # Write the post file (skip lines before title and the title line itself)
            with open(post_filepath, "w") as f:
                f.write(front_matter)
                # Remove trailing \r from each line before writing
                f.writelines(
                    [
                        line.rstrip("\r\n") + "\n"
                        for line in lines[title_line_index + 1 :]
                    ]
                )

            # Add to meditations list for JSON index
            meditations.append(
                {
                    "title": title,
                    "slug": slug,
                    "content": "".join(
                        [line.rstrip("\r\n") for line in lines[title_line_index + 1 :]]
                    ).strip(),
                }
            )

    # Create meditations.json
    meditations_json_path = os.path.join(data_dir, "meditations.json")
    print(f"meditations_json_path: {meditations_json_path}")

    # Create the directory if it doesn't exist
    os.makedirs(os.path.dirname(meditations_json_path), exist_ok=True)
    print(
        f"Directory created (or already exists): {os.path.dirname(meditations_json_path)}"
    )

    meditations.sort(key=lambda x: x["title"])  # Add this line
    try:
        with open(meditations_json_path, "w") as f:
            json.dump(meditations, f, indent=2)
            print(
                f"Successfully created: {meditations_json_path}"
            )  # Print success message
    except Exception as e:
        print(f"Error creating {meditations_json_path}: {e}")  # Print error message

    print(f"Processed {len(meditations)} markdown files.")


# --- Main execution ---
if __name__ == "__main__":
    source_directory = (
        "../transcript_proofread_std_markdown"  # Change to your source directory
    )
    posts_directory = "_posts"
    data_directory = "data"  # Output directory for meditations.json

    print(f"Source Directory: {source_directory}")
    print(f"Posts Directory: {posts_directory}")
    print(f"Data Directory: {data_directory}")

    convert_markdown_to_posts(source_directory, posts_directory, data_directory)

================
File: README.md
================
# Fr. Conor Donnelly Meditations

This repository contains the source code for a website that displays a collection of meditations by Fr. Conor Donnelly. The website is built using Jekyll and hosted on GitHub Pages.

## Processing Markdown Files

1. **Place Markdown Files:** Put your proofread markdown files (e.g., from `../transcript_proofread_markdown`) into the `transcript_proofread_markdown_small` directory. Each markdown file should contain the content of a single meditation.

2. **Run the Script:**

    ```bash
    python process_markdown.py
    ```

    *   This script will:
        *   Convert each markdown file in `transcript_proofread_markdown_small` into a Jekyll post in the `_posts` directory.
        *   Generate a `meditations.json` file in the `_data` directory, which contains metadata for the search functionality.

## Building and Running the Site Locally

1. **Build the Site:**

    ```bash
    bundle exec jekyll build
    ```

    This command will generate the static website files in the `docs` directory.

2. **Start the Development Server:**

    ```bash
    bundle exec jekyll serve
    ```

    This will start a local development server. You can view your website by opening `http://127.0.0.1:4000/meditations/` in your browser.

## Deploying to GitHub Pages

1. **Commit and Push Changes:**

    ```bash
    git add .
    git commit -m "Add meditations and build site"
    git push origin main
    ```

2. **Configure GitHub Pages:**

    *   Go to your repository on GitHub and navigate to **Settings > Pages**.
    *   Under **Source**, choose the `main` branch and the `/docs` folder.
    *   Click **Save**.

3. **Wait for Deployment:**

    *   GitHub Pages will take a few minutes to build and deploy your site. You can monitor the progress in the **Actions** tab of your repository.

4. **View Your Website:**

    *   Once deployed, your website will be accessible at `https://frconor-ebook.github.io/meditations/`.

## Updating the Website

1. **Add or Modify Meditations:** Place new or updated markdown files in `transcript_proofread_markdown_small`.
2. **Run `process_markdown.py`:**
    ```bash
    python process_markdown.py
    ```
3. **Rebuild the Site:**
    ```bash
    bundle exec jekyll build
    ```
4. **Commit and Push:**
    ```bash
    git add .
    git commit -m "Update meditations"
    git push origin main
    ```

GitHub Pages will automatically rebuild and redeploy your site.

## Troubleshooting

*   **Search Not Working:**
    *   Make sure `meditations.json` is being generated correctly in `_data`.
    *   Verify that the `fetch` URL in `search.js` is correct (`/meditations/_data/meditations.json`).
    *   Use your browser's developer tools (Network tab) to check if `meditations.json` is being fetched successfully.
*   **Permissions Errors:**
    *   If you encounter permission errors, make sure your user account has write access to the `docs` directory and its contents. You might need to adjust ownership or permissions using `chown` or `chmod`.
*   **Jekyll Build Errors:**
    *   Carefully examine the error messages from Jekyll. They often provide clues about the problem (e.g., incorrect YAML front matter, missing files, etc.).
    *   Check your `_config.yml` for any errors.

## Notes

*   This `README.md` assumes you are using the recommended setup where `meditations.json` is generated in the root `_data` directory and then copied to `docs/_data` by Jekyll.
*   The `create_project.sh` script is not essential for the core functionality but can be used to initially set up the project structure.
*   Remember to replace placeholder values (like your GitHub username) with your actual information.

This detailed `README.md` should provide a clear and comprehensive guide for setting up, building, deploying, and maintaining your Fr. Conor Donnelly Meditations website. Let me know if you have any more questions.
